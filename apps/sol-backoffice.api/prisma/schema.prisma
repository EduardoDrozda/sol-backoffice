generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String   @id @default(cuid())
  table     String
  action    String
  recordId  String
  companyId String
  oldValue  Json?
  newValue  Json?
  userId    String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Company {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String
  address String

  createdAt   DateTime  @default(now()) @map("created_at")
  createdById String?   @map("created_by")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")

  User            User[]
  ExpenseCategory ExpenseCategory[]
  CostCenter      CostCenter[]
  Group           Group[]
  Role            Role[]
  Permission      Permission[]
  Project         Project[]
  Expense         Expense[]
  Upload          Upload[]

  @@map("companies")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  companyId String?  @map("company_id")
  Company   Company? @relation(fields: [companyId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  createdById String?   @map("created_by")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")

  User        User[]
  permissions RolePermission[] @relation("RolePermissions")

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  roles       RolePermission[] @relation("PermissionRoles")
  companyId   String?          @map("company_id")
  Company     Company?         @relation(fields: [companyId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  createdById String?   @map("created_by")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")

  @@map("permissions")
}

model RolePermission {
  roleId       String @map("role_id")
  permissionId String @map("permission_id")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, name: "RolePermissions")
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, name: "PermissionRoles")

  createdAt   DateTime  @default(now()) @map("created_at")
  createdById String?   @map("created_by")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  phone    String
  isActive Boolean @default(false) @map("is_active")
  password String? @map("password")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  createdById String?   @map("created_by")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")

  role       Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String?     @map("role_id")
  userTokens UserToken[]
  Expense    Expense[]

  @@map("users")
}

model UserToken {
  id     String @id @default(cuid())
  userId String @map("user_id")
  token  String
  type   String @map("type")

  createdAt DateTime  @default(now())
  expiresAt DateTime? @map("expires_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_tokens")
}

model ExpenseCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  Expense     Expense[]

  @@map("expense_categories")
}

model CostCenter {
  id          String  @id @default(cuid())
  name        String
  description String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  Expense     Expense[]

  @@map("cost_centers")
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  Expense     Expense[]

  @@map("groups")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")
  Expense     Expense[]

  @@map("projects")
}

model Expense {
  id        String   @id @default(cuid())
  issueDate DateTime @map("issue_date")

  categoryExpenseId String          @map("category_expense_id")
  categoryExpense   ExpenseCategory @relation(fields: [categoryExpenseId], references: [id])
  description       String          @map("description")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  amount Float

  costCenterId String     @map("cost_center_id")
  costCenter   CostCenter @relation(fields: [costCenterId], references: [id])

  groupId String? @map("group_id")
  group   Group?  @relation(fields: [groupId], references: [id])

  projectId String?  @map("project_id")
  project   Project? @relation(fields: [projectId], references: [id])

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  isPaid Boolean @default(false) @map("is_paid")

  createdAt   DateTime @default(now()) @map("created_at")
  createdById String?  @map("created_by")

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById String?  @map("updated_by")

  deletedAt   DateTime? @map("deleted_at")
  deletedById String?   @map("deleted_by")

  @@map("expenses")
}

model Upload {
  id          String    @id @default(cuid())
  name        String
  path        String
  type        String
  size        Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedById String?
  companyId   String    @map("company_id")
  company     Company   @relation(fields: [companyId], references: [id])

  @@map("uploads")
}
